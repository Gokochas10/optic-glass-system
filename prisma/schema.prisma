generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  email   String

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  fullName      String
  email         String?        @unique
  age           Int
  phone         String?
  job           String?
  address       String?
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  MedicalRecord MedicalRecord []
}

model Autorefractometer {
  id               String        @id @default(dbgenerated("gen_random_uuid()"))
  medicalRecordId  String        @unique
  rightEyeSphere   Float?
  rightEyeCylinder Float?
  rightEyeAxis     Float?
  leftEyeSphere    Float?
  leftEyeCylinder  Float?
  leftEyeAxis      Float?
  MedicalRecord    MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model LensOptions {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  medicalRecordId String        @unique
  lensType        String?
  protections     String[]
  MedicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Lensometry {
  id               String        @id @default(dbgenerated("gen_random_uuid()"))
  medicalRecordId  String        @unique
  rightEyeSphere   Float?
  rightEyeCylinder Float?
  rightEyeAxis     Float?
  leftEyeSphere    Float?
  leftEyeCylinder  Float?
  leftEyeAxis      Float?
  MedicalRecord    MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model MedicalRecord {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  clientId          String             
  reason            String
  date              DateTime           @default(now()) @db.Timestamp(6)
  Autorefractometer Autorefractometer?
  LensOptions       LensOptions?
  Lensometry        Lensometry?
  Client            Client             @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Refraction        Refraction[]
  VisualAcuity      VisualAcuity?
}

model Refraction {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  medicalRecordId   String        @unique
  rightEyeSphere    Float?
  rightEyeCylinder  Float?
  rightEyeAxis      Float?
  rightEyeAddition  Float?
  rightEyeDnp       Float?
  rightEyeEyeHeight Float?
  leftEyeSphere     Float?
  leftEyeCylinder   Float?
  leftEyeAxis       Float?
  leftEyeAddition   Float?
  leftEyeDnp        Float?
  leftEyeEyeHeight  Float?
  notes             String?
  MedicalRecord     MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VisualAcuity {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  medicalRecordId String        @unique
  scOd            String?
  scOi            String?
  scJ             String?
  ccOd            String?
  ccOi            String?
  ccJ             String?
  MedicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum UserRole {
  ADMIN
  USER
}
